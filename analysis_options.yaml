# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

formatter:
  page_width: 300

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    always_use_package_imports: true
    cancel_subscriptions: true
    prefer_is_empty: true
    prefer_const_constructors: true
    always_put_required_named_parameters_first: true
    avoid_annotating_with_dynamic: true
    unnecessary_constructor_name: true
    unnecessary_late: true
    require_trailing_commas: true
    use_named_constants: true
    use_if_null_to_convert_nulls_to_bools: true
    use_full_hex_values_for_flutter_colors: true
    use_enums: true
    public_member_api_docs: false
    unawaited_futures: true
    unnecessary_await_in_return: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
